In this article I want to explore the nature of data and software. Data is all around us, and examples of data include budgets, journals, pictures, essays for school, product reviews, and blog comments. Until recently, I focused on the software application, rather than the data itself. When I wanted to create a spreadsheet I thought about Microsoft Excel, not the data I needed in this grid of rows and columns. When I wanted to interact or share this data, my first thoughts were of the *.xls or *.xlsx file, again, not the data itself. Likewise, when I needed to write an essay for school, my first thoughts were of Microsoft Word. When I need to interact with data, my first thoughts were of the software application, not the data.

Now, I've come to see software applications simply as front-ends for interacting with my data. Now, data is the primary concern, and not the software applications available to create and interact with the data. Where this is really important is when you think of your profiles, comments, status updates, and other information you share on social media such as Facebook and Twitter. Product reviews on Amazon.com and comments left on your favorite blogs are another great example of your data shared on social media where others can interact with your data. The various social media provide common means of interacting with your data while also providing unique ways of interacting with your data. When choosing between Microsoft Excel or another spreadsheet application or when choosing between WordPress and Google's Blogger, it is the unique features of each of these products among other considerations that influences the choice of software used to interact with your data.

I used to think of my data in terms of a software application. Rather than creating an array of dollars and accounts to create a budget, I would think I needed to create a Microsoft Excel file. Now, I've flipped the tables and am exploring the data itself. In some ways the pure data is beyond a specific application or evena specific website. Take a product review submitted to Amazon.com for example. It is likely the product you reviewed is available not only at Amazon.com, but a variety of of retailers too--both online and brick-and-mortar stores. Multiple online retailers offering customer-submitted product reviews could be viewed as a Microsoft Excel versus OpenOffice Spreadsheet application feature comparison. But take a larger view, and see how your review of this product could benefit not only customers at these online and brick-and-mortar stores selling this product, but your data--your product review--could benefit someone seeking this same product through any possible means, online and brick-and-mortar stores, eBay, Craigs List, local newspaper classified ads, and so on. The possibilities are vast. In this example, it is not so much comparing feature sets, but simply how many avenues available to make this product review available to whoever might benefit.

This idea of your data and software as a front-end gets interesting when we think about database management systems, such as Microsoft's SQL Server, PostgreSQL, MySQL, among others. These systems by their very nature must store your data in complex binary non-human-readable formats so that your interaction with your data using these systems will be fast and efficient.

So, where is all this pondering about personal data going? Where are we headed?

What I am picturing tonight is a personal data API or application programming interface; a library of software routines that would give the user of software applications more control over their data. Sure, software applications today off data import and export features but to varying degrees; and most applications focus on the import (bringing data from other applications into this application). Without any sort of standard, the kinds of data that can be pulled back out of the system (or exported) is mixed from one application to another. What I am describing today is a standard set of features giving users of software applications a common set of standards or features for controlling their personal data in these various software applications or front-ends to personal data.

I'm beginning to view this idea of personal data versus a software front-end for interacting with such data where there is a user's raw data and then the user's formatted data. The raw data is the pure data itself--the numbers, the photograph, the words of a report. The raw data is the user's guts and glory. Formatted data, however, is the raw data transformed by the chosen software application. This makes the process of exporting and importing user data interesting. On the one hand we could strictly be interested in exporting or importing our raw, unformatted data so that we can interact from scratch with this data in a different application. On another hand, I could envision scenarios where I might want to export the formatted data from one software application and then import this formatted data into another application that has additional features. In this scenario I am using what one application offers feature-wise, then using another application with different features to build upon what was available in the originating software application.

This is why I said before that database management systems make this idea of more control over your own personal data very interesting, yet still doable. As has been mentioned, databases are complex structures that store your personal data in a way optimized for speed of interacting with that data. If a database is involved, then the amount of personal data we are talking about is likely to be quite large. Because of this large amount of highly structured data, it isn't a simple Save As command that can pull all this data back down out of the software application. Yet, it is perfectly possible; it will just take more code to make it happen. Actually, the more I think about this, the less out of the ordinary this example actually seems.

To be clear, the best case scenario for this being implemented is to implement in all new software applications created from today forward. To go back and redesign existing applications such as Facebook or Microsoft Excel would be a challenge. Yet, to even get this far, we first must gather every software developer in the world and get them to agree to such a standard framework for controlling a user's personal data in a software application.

In beginning to think about an implementation for such a framework, XML comes to the top of the list of structuring raw data in a fairly standard way that can easily be manipulated or interacted with. However, we can also consider how Microsoft Office uses XML as a basis for a highly complex and not-so-human-friendly structure of formatted data. Perhaps the difference here is just that in the Microsoft Office case it is formatted data that makes the underlying XML so complex, yet XML applied to unformatted or raw data that there would not be required as much complexity of XML--a lot simpler to read and understand by humans.

Here is an interesting potential curve ball to this idea. Let's consider software bug reports for a moment. A user can submit a bug report on an application he uses. This application could be a commercial or for-profit application or it could be an open-source application. If it were a commercial application, the question could reasonably be asked, who really owns this bug report? While in one sense the user created the data of the report so the data--the language and style of how the bug details were reported to the application developers, in another sense I could see where the commercial application developers would want to control these bug reports and how and where they are visible to other users of the software. Besides, the bug itself is in the commercial applicaton itself which is owned by the for-profit company. On the other hand, users and their finding and reporting of bugs help keep these commercial application vendors honest. In a way it is no different that discussing a bad experience at a restaurant or retail store on your Facebook or Twitter page.

Another aspect brought about by commercial software vendors is the fact that a company likely develops software with a given feature set for a given release with the goal simply to make more money for the company. In a company's mind, their software is the best and the only software users should be using for the type of data it addresses. In this regard, I could easily see commercial software companies balking at the idea of standards making it easier to move one's data from their application to another vendor. This runs counter to the idea that one company will develop software and make it easy for other software vendors to hook on to their software. 


